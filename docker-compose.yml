services:
  kafka:
    image: 'bitnami/kafka:3.7.0'
    container_name: Apache-Kafka
    hostname: kafka
    ports:
      - '9094:9094'
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER

  vault-server:
    image: hashicorp/vault:latest
    container_name: Vault
    ports:
      - "8200:8200"
    volumes:
      - ./init-vault.sh:/init-vault.sh
    cap_add:
      - IPC_LOCK
    command: >
      sh -c "vault server -dev -dev-listen-address=0.0.0.0:8200 &
             sleep 2 && /init-vault.sh &&
             tail -f /dev/null"
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=myroot
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200

  zookeeper:
    image: zookeeper:latest
    container_name: zookeeperRegistry
    restart: always
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2

  keycloak:
    image: quay.io/keycloak/keycloak:26.0.0
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
      - KC_DB=mysql
      - KC_DB_URL=jdbc:mysql://host.docker.internal:3306/keycloak?useSSL=false&serverTimezone=UTC
      - KC_DB_USERNAME=root
      - KC_DB_PASSWORD=123456
      - KC_HOSTNAME=localhost
      - KC_HTTP_ENABLED=true
      - KC_HOSTNAME_STRICT=false
      - KC_PROXY=edge
    ports:
      - "8081:8080"
    command:
      - start-dev

  redis:
    container_name: redis
    image: redis:latest
    restart: always
    ports:
      - "6379:6379"
    command: [ "bash", "-c", "redis-server --appendonly yes --requirepass 123" ]
    volumes:
      - cache:/data

volumes:
  cache:
    driver: local
  vault-data:
  #networks:
  #  temporal-network:
  #    driver: bridge